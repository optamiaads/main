{"messages": [{"role": "system", "content": "You are an expert in Pine Script v6 for TradingView and NinjaScript for NinjaTrader 8 (NT8), proficient in creating high-quality, accurate, and optimized scripts for technical analysis and trading strategies.\n\nYour primary tasks are:\n• Converting summarized trading strategies into precise Pine Script v6 and NinjaScript code.\n• Troubleshooting and optimizing existing scripts for both TradingView and NinjaTrader 8.\n\nInteraction Workflow:\n1. Read and fully understand the provided summary or existing code of the trading strategy.\n2. Clearly reiterate or summarize the strategy back to the user for confirmation.\n3. Explicitly request confirmation or clarification from the user to ensure accuracy.\n4. Address any errors, omissions, or ambiguities identified by the user before proceeding.\n5. Only after receiving user confirmation, write accurate Pine Script v6 and NinjaScript code.\n\nKey Principles:\n• Provide precise, concise, and technically accurate Pine Script and NinjaScript examples.\n• Follow functional and declarative programming paradigms to minimize complexity.\n• Prioritize readability and maintainability; avoid unnecessary nesting or complexity.\n• Use meaningful variable names with descriptive intent."}, {"role": "user", "content": "Explain: https://developer.ninjatrader.com/docs/desktop/bars_type"}, {"role": "assistant", "content": "This website is hosted and operated by NinjaTrader, LLC (“NT”), a software development company responsible for owning and supporting proprietary technology related to the NinjaTrader trading platform. NT is an affiliated company of NinjaTrader Clearing, LLC, an CFTC registered Futures Commission Merchant (NFA #0309379) providing brokerage services to futures traders. This website is designed solely for platform-related and educational purposes, providing non-regulated services. It should not be interpreted as a solicitation or recommendation of any product, service or trading strategy. Neither NT, nor any of its affiliates, endorses, or provides any offer or solicitation to buy or sell securities, securities derivatives, or futures products of any kind, nor does it offer trading or investment advice, recommendations, or strategies. Specific questions regarding brokerage accounts should be directed to your broker. The content and opinions expressed on this website are those of the individual authors and do not necessarily reflect the official policy or position of NT or its affiliates. Third-party vendors, along with their websites, products, and services (collectively referred to as \"Vendor Content\"), are independent and unaffiliated with NT or any of its affiliates. NT and its affiliates are not responsible for, nor do they approve, recommend, or endorse any Vendor Content referenced on this website. It is your sole responsibility to evaluate Vendor Content before use or reliance. Any performance data provided by vendors should be considered hypothetical and must comply with the disclosures mandated by NFA Rule 2-29(c) and CFTC Regulation 4.41. CFTC Rule 4.41 - Hypothetical or simulated performance results have inherent limitations. Unlike actual performance records, simulated results do not represent real trading. Since trades were not executed, these results may overcompensate or under compensate for factors such as market liquidity. Simulated trading programs are also inherently designed with the benefit of hindsight. No representation is being made that any account will or is likely to achieve profits or losses similar to those depicted. For inquiries regarding the quality or accuracy of any Vendor Content, you must contact the respective vendor directly. No employee or affiliate of NT is authorized to provide information or evaluations regarding Vendor Content. This website is not an offer or solicitation for any services or products in any jurisdiction where such offer or solicitation would be contrary to local laws or regulations of that jurisdiction. View Privacy Policy"}]}
{"messages": [{"role": "system", "content": "You are an expert in Pine Script v6 for TradingView and NinjaScript for NinjaTrader 8 (NT8), proficient in creating high-quality, accurate, and optimized scripts for technical analysis and trading strategies.\n\nYour primary tasks are:\n• Converting summarized trading strategies into precise Pine Script v6 and NinjaScript code.\n• Troubleshooting and optimizing existing scripts for both TradingView and NinjaTrader 8.\n\nInteraction Workflow:\n1. Read and fully understand the provided summary or existing code of the trading strategy.\n2. Clearly reiterate or summarize the strategy back to the user for confirmation.\n3. Explicitly request confirmation or clarification from the user to ensure accuracy.\n4. Address any errors, omissions, or ambiguities identified by the user before proceeding.\n5. Only after receiving user confirmation, write accurate Pine Script v6 and NinjaScript code.\n\nKey Principles:\n• Provide precise, concise, and technically accurate Pine Script and NinjaScript examples.\n• Follow functional and declarative programming paradigms to minimize complexity.\n• Prioritize readability and maintainability; avoid unnecessary nesting or complexity.\n• Use meaningful variable names with descriptive intent."}, {"role": "user", "content": "Explain: https://developer.ninjatrader.com/docs/desktop/ninjascript_editor_overview"}, {"role": "assistant", "content": "This website is hosted and operated by NinjaTrader, LLC (“NT”), a software development company responsible for owning and supporting proprietary technology related to the NinjaTrader trading platform. NT is an affiliated company of NinjaTrader Clearing, LLC, an CFTC registered Futures Commission Merchant (NFA #0309379) providing brokerage services to futures traders. This website is designed solely for platform-related and educational purposes, providing non-regulated services. It should not be interpreted as a solicitation or recommendation of any product, service or trading strategy. Neither NT, nor any of its affiliates, endorses, or provides any offer or solicitation to buy or sell securities, securities derivatives, or futures products of any kind, nor does it offer trading or investment advice, recommendations, or strategies. Specific questions regarding brokerage accounts should be directed to your broker. The content and opinions expressed on this website are those of the individual authors and do not necessarily reflect the official policy or position of NT or its affiliates. Third-party vendors, along with their websites, products, and services (collectively referred to as \"Vendor Content\"), are independent and unaffiliated with NT or any of its affiliates. NT and its affiliates are not responsible for, nor do they approve, recommend, or endorse any Vendor Content referenced on this website. It is your sole responsibility to evaluate Vendor Content before use or reliance. Any performance data provided by vendors should be considered hypothetical and must comply with the disclosures mandated by NFA Rule 2-29(c) and CFTC Regulation 4.41. CFTC Rule 4.41 - Hypothetical or simulated performance results have inherent limitations. Unlike actual performance records, simulated results do not represent real trading. Since trades were not executed, these results may overcompensate or under compensate for factors such as market liquidity. Simulated trading programs are also inherently designed with the benefit of hindsight. No representation is being made that any account will or is likely to achieve profits or losses similar to those depicted. For inquiries regarding the quality or accuracy of any Vendor Content, you must contact the respective vendor directly. No employee or affiliate of NT is authorized to provide information or evaluations regarding Vendor Content. This website is not an offer or solicitation for any services or products in any jurisdiction where such offer or solicitation would be contrary to local laws or regulations of that jurisdiction. View Privacy Policy"}]}
{"messages": [{"role": "system", "content": "You are an expert in Pine Script v6 for TradingView and NinjaScript for NinjaTrader 8 (NT8), proficient in creating high-quality, accurate, and optimized scripts for technical analysis and trading strategies.\n\nYour primary tasks are:\n• Converting summarized trading strategies into precise Pine Script v6 and NinjaScript code.\n• Troubleshooting and optimizing existing scripts for both TradingView and NinjaTrader 8.\n\nInteraction Workflow:\n1. Read and fully understand the provided summary or existing code of the trading strategy.\n2. Clearly reiterate or summarize the strategy back to the user for confirmation.\n3. Explicitly request confirmation or clarification from the user to ensure accuracy.\n4. Address any errors, omissions, or ambiguities identified by the user before proceeding.\n5. Only after receiving user confirmation, write accurate Pine Script v6 and NinjaScript code.\n\nKey Principles:\n• Provide precise, concise, and technically accurate Pine Script and NinjaScript examples.\n• Follow functional and declarative programming paradigms to minimize complexity.\n• Prioritize readability and maintainability; avoid unnecessary nesting or complexity.\n• Use meaningful variable names with descriptive intent."}, {"role": "user", "content": "Explain: https://developer.ninjatrader.com/docs/desktop/ninjascript_editor_overview"}, {"role": "assistant", "content": "This website is hosted and operated by NinjaTrader, LLC (“NT”), a software development company responsible for owning and supporting proprietary technology related to the NinjaTrader trading platform. NT is an affiliated company of NinjaTrader Clearing, LLC, an CFTC registered Futures Commission Merchant (NFA #0309379) providing brokerage services to futures traders. This website is designed solely for platform-related and educational purposes, providing non-regulated services. It should not be interpreted as a solicitation or recommendation of any product, service or trading strategy. Neither NT, nor any of its affiliates, endorses, or provides any offer or solicitation to buy or sell securities, securities derivatives, or futures products of any kind, nor does it offer trading or investment advice, recommendations, or strategies. Specific questions regarding brokerage accounts should be directed to your broker. The content and opinions expressed on this website are those of the individual authors and do not necessarily reflect the official policy or position of NT or its affiliates. Third-party vendors, along with their websites, products, and services (collectively referred to as \"Vendor Content\"), are independent and unaffiliated with NT or any of its affiliates. NT and its affiliates are not responsible for, nor do they approve, recommend, or endorse any Vendor Content referenced on this website. It is your sole responsibility to evaluate Vendor Content before use or reliance. Any performance data provided by vendors should be considered hypothetical and must comply with the disclosures mandated by NFA Rule 2-29(c) and CFTC Regulation 4.41. CFTC Rule 4.41 - Hypothetical or simulated performance results have inherent limitations. Unlike actual performance records, simulated results do not represent real trading. Since trades were not executed, these results may overcompensate or under compensate for factors such as market liquidity. Simulated trading programs are also inherently designed with the benefit of hindsight. No representation is being made that any account will or is likely to achieve profits or losses similar to those depicted. For inquiries regarding the quality or accuracy of any Vendor Content, you must contact the respective vendor directly. No employee or affiliate of NT is authorized to provide information or evaluations regarding Vendor Content. This website is not an offer or solicitation for any services or products in any jurisdiction where such offer or solicitation would be contrary to local laws or regulations of that jurisdiction. View Privacy Policy"}]}
{"messages": [{"role": "system", "content": "You are an expert in Pine Script v6 for TradingView and NinjaScript for NinjaTrader 8 (NT8), proficient in creating high-quality, accurate, and optimized scripts for technical analysis and trading strategies.\n\nYour primary tasks are:\n• Converting summarized trading strategies into precise Pine Script v6 and NinjaScript code.\n• Troubleshooting and optimizing existing scripts for both TradingView and NinjaTrader 8.\n\nInteraction Workflow:\n1. Read and fully understand the provided summary or existing code of the trading strategy.\n2. Clearly reiterate or summarize the strategy back to the user for confirmation.\n3. Explicitly request confirmation or clarification from the user to ensure accuracy.\n4. Address any errors, omissions, or ambiguities identified by the user before proceeding.\n5. Only after receiving user confirmation, write accurate Pine Script v6 and NinjaScript code.\n\nKey Principles:\n• Provide precise, concise, and technically accurate Pine Script and NinjaScript examples.\n• Follow functional and declarative programming paradigms to minimize complexity.\n• Prioritize readability and maintainability; avoid unnecessary nesting or complexity.\n• Use meaningful variable names with descriptive intent."}, {"role": "user", "content": "Explain: https://developer.ninjatrader.com/docs/desktop/chart_style"}, {"role": "assistant", "content": "This website is hosted and operated by NinjaTrader, LLC (“NT”), a software development company responsible for owning and supporting proprietary technology related to the NinjaTrader trading platform. NT is an affiliated company of NinjaTrader Clearing, LLC, an CFTC registered Futures Commission Merchant (NFA #0309379) providing brokerage services to futures traders. This website is designed solely for platform-related and educational purposes, providing non-regulated services. It should not be interpreted as a solicitation or recommendation of any product, service or trading strategy. Neither NT, nor any of its affiliates, endorses, or provides any offer or solicitation to buy or sell securities, securities derivatives, or futures products of any kind, nor does it offer trading or investment advice, recommendations, or strategies. Specific questions regarding brokerage accounts should be directed to your broker. The content and opinions expressed on this website are those of the individual authors and do not necessarily reflect the official policy or position of NT or its affiliates. Third-party vendors, along with their websites, products, and services (collectively referred to as \"Vendor Content\"), are independent and unaffiliated with NT or any of its affiliates. NT and its affiliates are not responsible for, nor do they approve, recommend, or endorse any Vendor Content referenced on this website. It is your sole responsibility to evaluate Vendor Content before use or reliance. Any performance data provided by vendors should be considered hypothetical and must comply with the disclosures mandated by NFA Rule 2-29(c) and CFTC Regulation 4.41. CFTC Rule 4.41 - Hypothetical or simulated performance results have inherent limitations. Unlike actual performance records, simulated results do not represent real trading. Since trades were not executed, these results may overcompensate or under compensate for factors such as market liquidity. Simulated trading programs are also inherently designed with the benefit of hindsight. No representation is being made that any account will or is likely to achieve profits or losses similar to those depicted. For inquiries regarding the quality or accuracy of any Vendor Content, you must contact the respective vendor directly. No employee or affiliate of NT is authorized to provide information or evaluations regarding Vendor Content. This website is not an offer or solicitation for any services or products in any jurisdiction where such offer or solicitation would be contrary to local laws or regulations of that jurisdiction. View Privacy Policy"}]}
{"messages": [{"role": "system", "content": "You are an expert in Pine Script v6 for TradingView and NinjaScript for NinjaTrader 8 (NT8), proficient in creating high-quality, accurate, and optimized scripts for technical analysis and trading strategies.\n\nYour primary tasks are:\n• Converting summarized trading strategies into precise Pine Script v6 and NinjaScript code.\n• Troubleshooting and optimizing existing scripts for both TradingView and NinjaTrader 8.\n\nInteraction Workflow:\n1. Read and fully understand the provided summary or existing code of the trading strategy.\n2. Clearly reiterate or summarize the strategy back to the user for confirmation.\n3. Explicitly request confirmation or clarification from the user to ensure accuracy.\n4. Address any errors, omissions, or ambiguities identified by the user before proceeding.\n5. Only after receiving user confirmation, write accurate Pine Script v6 and NinjaScript code.\n\nKey Principles:\n• Provide precise, concise, and technically accurate Pine Script and NinjaScript examples.\n• Follow functional and declarative programming paradigms to minimize complexity.\n• Prioritize readability and maintainability; avoid unnecessary nesting or complexity.\n• Use meaningful variable names with descriptive intent."}, {"role": "user", "content": "Explain: https://www.tradingview.com/pine-script-docs/writing/style-guide"}, {"role": "assistant", "content": "This style guide provides recommendations on how to name variables and\norganize your Pine scripts in a standard way that works well. Scripts\nthat follow our best practices will be easier to read, understand and\nmaintain. You can see scripts using these guidelines published from the TradingView and PineCoders accounts on the platform. We recommend the use of: camelCase for all identifiers, i.e., variable or function names: ma , maFast , maLengthInput , maColor , roundedOHLC() , pivotHi() . All caps SNAKE_CASE for constants: BULL_COLOR , BEAR_COLOR , MAX_LOOKBACK . The use of qualifying suffixes when it provides valuable clues about\nthe type or provenance of a variable: maShowInput , bearColor , bearColorInput , volumesArray , maPlotID , resultsTable , levelsColorArray . The Pine Script® compiler is quite forgiving of the positioning of\nspecific statements or the version compiler annotation in the script. While other arrangements are syntactically\ncorrect, this is how we recommend organizing scripts: If you publish your open-source scripts publicly on TradingView (scripts\ncan also be published privately), your open-source code is by default\nprotected by the Mozilla license. You may choose any other license you\nprefer. The reuse of code from those scripts is governed by our House Rules on\nScript\nPublishing which preempt the author’s license. The standard license comments appearing at the beginning of scripts are: // This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © username This is the compiler annotation defining the version of Pine Script the script will use. If\nnone is present, v1 is used. For v6, use: //@version=6 This is the mandatory declaration statement which defines the type of\nyour script. It must be a call to either indicator() , strategy() ,\nor library() . If your script uses one or more Pine Script libraries , your import statements belong here. Scripts can declare variables qualified as “const”, i.e., ones\nreferencing a constant value. We refer to variables as “constants” when they meet these criteria: Their declaration uses the optional const keyword (see our User\nManual’s section on type qualifiers for more information). They are initialized using a literal (e.g., 100 or \"AAPL\" ) or a\nbuilt-in qualified as “const” (e.g., color.green ). Their value does not change during the script’s execution. We use SNAKE_CASE to name these variables and group their declaration\nnear the top of the script. For example: // ————— Constants\nint MS_IN_MIN = 60 * 1000\nint MS_IN_HOUR = MS_IN_MIN * 60\nint MS_IN_DAY = MS_IN_HOUR * 24 color GRAY = #808080ff\ncolor LIME = #00FF00ff\ncolor MAROON = #800000ff\ncolor ORANGE = #FF8000ff\ncolor PINK = #FF0080ff\ncolor TEAL = #008080ff\ncolor BG_DIV = color.new(ORANGE, 90)\ncolor BG_RESETS = color.new(GRAY, 90) string RST1 = \"No reset; cumulate since the beginning of the chart\"\nstring RST2 = \"On a stepped higher timeframe (HTF)\"\nstring RST3 = \"On a fixed HTF\"\nstring RST4 = \"At a fixed time\"\nstring RST5 = \"At the beginning of the regular session\"\nstring RST6 = \"At the first visible chart bar\"\nstring RST7 = \"Fixed rolling period\" string LTF1 = \"Least precise, covering many chart bars\"\nstring LTF2 = \"Less precise, covering some chart bars\"\nstring LTF3 = \"More precise, covering less chart bars\"\nstring LTF4 = \"Most precise, 1min intrabars\" string TT_TOTVOL = \"The 'Bodies' value is the transparency of the total volume candle bodies. Zero is opaque, 100 is transparent.\"\nstring TT_RST_HTF = \"This value is used when '\" + RST3 +\"' is selected.\"\nstring TT_RST_TIME = \"These values are used when '\" + RST4 +\"' is selected. A reset will occur when the time is greater or equal to the bar's open time, and less than its close time.\\nHour: 0-23\\nMinute: 0-59\"\nstring TT_RST_PERIOD = \"This value is used when '\" + RST7 +\"' is selected.\" In this example: The RST* and LTF* constants will be used as tuple elements in\nthe options argument of input.*() calls. The TT_* constants will be used as tooltip arguments in input.*() calls. Note how we use a line continuation for long\nstring literals. We do not use var to initialize constants. The Pine Script runtime is optimized to\nhandle declarations on each bar, but using var to initialize a variable only the first time it is declared incurs a\nminor penalty on script performance because of the maintenance that var variables require on further bars. Note that: Literals used in more than one place in a script should always be\ndeclared as a constant. Using the constant rather than the literal\nmakes it more readable if it is given a meaningful name, and the\npractice makes code easier to maintain. Even though the quantity of\nmilliseconds in a day is unlikely to change in the future, MS_IN_DAY is more meaningful than 1000 * 60 * 60 * 24 . Constants only used in the local block of a function or if , while ,\netc., statement for example, can be declared in that local block. It is much easier to read scripts when all their inputs are in the\nsame code section. Placing that section at the beginning of the script\nalso reflects how they are processed at runtime, i.e., before the rest\nof the script is executed. Suffixing input variable names with input makes them more readily\nidentifiable when they are used later in the script: maLengthInput , bearColorInput , showAvgInput , etc. // ————— Inputs\nstring resetInput = input.string(RST2, \"CVD Resets\", inline = \"00\", options = [RST1, RST2, RST3, RST4, RST5, RST6, RST7])\nstring fixedTfInput = input.timeframe(\"D\", \" Fixed HTF: \", tooltip = TT_RST_HTF)\nint hourInput = input.int(9, \" Fixed time hour: \", inline = \"01\", minval = 0, maxval = 23)\nint minuteInput = input.int(30, \"minute\", inline = \"01\", minval = 0, maxval = 59, tooltip = TT_RST_TIME)\nint fixedPeriodInput = input.int(20, \" Fixed period: \", inline = \"02\", minval = 1, tooltip = TT_RST_PERIOD)\nstring ltfModeInput = input.string(LTF3, \"Intrabar precision\", inline = \"03\", options = [LTF1, LTF2, LTF3, LTF4]) All user-defined functions must be defined in the script’s global\nscope; nested function definitions are not allowed in Pine Script. Optimal function design should minimize the use of global variables in\nthe function’s scope, as they undermine function portability. When it\ncan’t be avoided, those functions must follow the global variable\ndeclarations in the code, which entails they can’t always be placed in\nthe <function_declarations> section. Such dependencies on global\nvariables should ideally be documented in the function’s comments. It will also help readers if you document the function’s objective,\nparameters and result. The same syntax used in libraries can be used to\ndocument your functions. This can make it easier to port your functions\nto a library should you ever decide to do so: //@version=6\nindicator(\"<function_declarations>\", \"\", true) string SIZE_LARGE = \"Large\"\nstring SIZE_NORMAL = \"Normal\"\nstring SIZE_SMALL = \"Small\" string sizeInput = input.string(SIZE_NORMAL, \"Size\", options = [SIZE_LARGE, SIZE_NORMAL, SIZE_SMALL]) // @function Used to produce an argument for the `size` parameter in built-in functions.\n// @param userSize (simple string) User-selected size.\n// @returns One of the `size.*` built-in constants.\n// Dependencies SIZE_LARGE, SIZE_NORMAL, SIZE_SMALL\ngetSize(simple string userSize) => result = switch userSize SIZE_LARGE => size.large SIZE_NORMAL => size.normal SIZE_SMALL => size.small => size.auto if ta.rising(close, 3) label.new(bar_index, na, yloc = yloc.abovebar, style = label.style_arrowup, size = getSize(sizeInput)) This is where the script’s core calculations and logic should be\nplaced. Code can be easier to read when variable declarations are placed\nnear the code segment using the variables. Some programmers prefer to\nplace all their non-constant variable declarations at the beginning of\nthis section, which is not always possible for all variables, as some\nmay require some calculations to have been executed before their\ndeclaration. Strategies are easier to read when strategy calls are grouped in the\nsame section of the script. This section should ideally include all the statements producing the\nscript’s visuals, whether they be plots, drawings, background colors,\ncandle-plotting, etc. See the Pine Script user manual’s section on here for more\ninformation on how the relative depth of visuals is determined. Alert code will usually require the script’s calculations to have\nexecuted before it, so it makes sense to put it at the end of the\nscript. A space should be used on both sides of all operators, except unary\noperators ( -1 ). A space is also recommended after all commas and when\nusing named function arguments, as in plot(series = close) : int a = close > open ? 1 : -1\nvar int newLen = 2\nnewLen := min(20, newlen + 1)\nfloat a = -b\nfloat c = d > e ? d - e : d\nint index = bar_index % 2 == 0 ? 1 : 2\nplot(close, color = color.red) Line wrapping can make long lines easier to read. Line wraps are defined\nby using an indentation level that is not a multiple of four, as four\nspaces or a tab are used to define local blocks. Here we use two spaces: plot( series = close, title = \"Close\", color = color.blue, show_last = 10 ) Vertical alignment using tabs or spaces can be useful in code sections\ncontaining many similar lines such as constant declarations or inputs.\nThey can make mass edits much easier using the Pine Editor’s\nmulti-cursor feature ( ctrl + alt + 🠅 ): // Colors used as defaults in inputs.\ncolor COLOR_AQUA = #0080FFff\ncolor COLOR_BLACK = #000000ff\ncolor COLOR_BLUE = #013BCAff\ncolor COLOR_CORAL = #FF8080ff\ncolor COLOR_GOLD = #CCCC00ff Including the type of variables when declaring them is not required.\nHowever, it helps make scripts easier to read, navigate, and understand.\nIt can help clarify the expected types at each point in a script’s\nexecution and distinguish a variable’s declaration (using = ) from its\nreassignments (using := ). Using explicit typing can also make scripts\neasier to debug ."}]}
{"messages": [{"role": "system", "content": "You are an expert in Pine Script v6 for TradingView and NinjaScript for NinjaTrader 8 (NT8), proficient in creating high-quality, accurate, and optimized scripts for technical analysis and trading strategies.\n\nYour primary tasks are:\n• Converting summarized trading strategies into precise Pine Script v6 and NinjaScript code.\n• Troubleshooting and optimizing existing scripts for both TradingView and NinjaTrader 8.\n\nInteraction Workflow:\n1. Read and fully understand the provided summary or existing code of the trading strategy.\n2. Clearly reiterate or summarize the strategy back to the user for confirmation.\n3. Explicitly request confirmation or clarification from the user to ensure accuracy.\n4. Address any errors, omissions, or ambiguities identified by the user before proceeding.\n5. Only after receiving user confirmation, write accurate Pine Script v6 and NinjaScript code.\n\nKey Principles:\n• Provide precise, concise, and technically accurate Pine Script and NinjaScript examples.\n• Follow functional and declarative programming paradigms to minimize complexity.\n• Prioritize readability and maintainability; avoid unnecessary nesting or complexity.\n• Use meaningful variable names with descriptive intent."}, {"role": "user", "content": "Explain: https://developer.ninjatrader.com/docs/desktop/import_type"}, {"role": "assistant", "content": "This website is hosted and operated by NinjaTrader, LLC (“NT”), a software development company responsible for owning and supporting proprietary technology related to the NinjaTrader trading platform. NT is an affiliated company of NinjaTrader Clearing, LLC, an CFTC registered Futures Commission Merchant (NFA #0309379) providing brokerage services to futures traders. This website is designed solely for platform-related and educational purposes, providing non-regulated services. It should not be interpreted as a solicitation or recommendation of any product, service or trading strategy. Neither NT, nor any of its affiliates, endorses, or provides any offer or solicitation to buy or sell securities, securities derivatives, or futures products of any kind, nor does it offer trading or investment advice, recommendations, or strategies. Specific questions regarding brokerage accounts should be directed to your broker. The content and opinions expressed on this website are those of the individual authors and do not necessarily reflect the official policy or position of NT or its affiliates. Third-party vendors, along with their websites, products, and services (collectively referred to as \"Vendor Content\"), are independent and unaffiliated with NT or any of its affiliates. NT and its affiliates are not responsible for, nor do they approve, recommend, or endorse any Vendor Content referenced on this website. It is your sole responsibility to evaluate Vendor Content before use or reliance. Any performance data provided by vendors should be considered hypothetical and must comply with the disclosures mandated by NFA Rule 2-29(c) and CFTC Regulation 4.41. CFTC Rule 4.41 - Hypothetical or simulated performance results have inherent limitations. Unlike actual performance records, simulated results do not represent real trading. Since trades were not executed, these results may overcompensate or under compensate for factors such as market liquidity. Simulated trading programs are also inherently designed with the benefit of hindsight. No representation is being made that any account will or is likely to achieve profits or losses similar to those depicted. For inquiries regarding the quality or accuracy of any Vendor Content, you must contact the respective vendor directly. No employee or affiliate of NT is authorized to provide information or evaluations regarding Vendor Content. This website is not an offer or solicitation for any services or products in any jurisdiction where such offer or solicitation would be contrary to local laws or regulations of that jurisdiction. View Privacy Policy"}]}
{"file_name": "ADX.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// The Average Directional Index measures the strength of a prevailing trend as well as whether movement\n        /// exists in the market. The ADX is measured on a scale of 0  100. A low ADX value (generally less than 20)\n        /// can indicate a non-trending market with low volumes whereas a cross above 20 may indicate the start of\n        ///  a trend (either up or down). If the ADX is over 40 and begins to fall, it can indicate the slowdown of a current trend.\n        /// </summary>\n        public class ADX : Indicator\n        {\n                private Series<double>                dmPlus;\n                private Series<double>                dmMinus;\n                private Series<double>                sumDmPlus;\n                private Series<double>                sumDmMinus;\n                private Series<double>                sumTr;\n                private Series<double>                tr;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionADX;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameADX;\n                                IsSuspendedWhileInactive        = true;\n                                Period                                                = 14;\n\n\n                                AddPlot(Brushes.DarkCyan,                NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameADX);\n                                AddLine(Brushes.SlateBlue,        25,        NinjaTrader.Custom.Resource.NinjaScriptIndicatorLower);\n                                AddLine(Brushes.Goldenrod,        75,        NinjaTrader.Custom.Resource.NinjaScriptIndicatorUpper);\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                dmPlus                = new Series<double>(this);\n                                dmMinus                = new Series<double>(this);\n                                sumDmPlus        = new Series<double>(this);\n                                sumDmMinus        = new Series<double>(this);\n                                sumTr                = new Series<double>(this);\n                                tr                        = new Series<double>(this);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        double high0        = High[0];\n                        double low0                = Low[0];\n\n\n                        if (CurrentBar == 0)\n                        {\n                                tr[0]                                = high0 - low0;\n                                dmPlus[0]                        = 0;\n                                dmMinus[0]                        = 0;\n                                sumTr[0]                        = tr[0];\n                                sumDmPlus[0]                = dmPlus[0];\n                                sumDmMinus[0]                = dmMinus[0];\n                                Value[0]                        = 50;\n                        }\n                        else\n                        {\n                                double high1                = High[1];\n                                double low1                        = Low[1];\n                                double close1                = Close[1];\n\n\n                                tr[0]                                = Math.Max(Math.Abs(low0 - close1), Math.Max(high0 - low0, Math.Abs(high0 - close1)));\n                                dmPlus[0]                        = high0 - high1 > low1 - low0 ? Math.Max(high0 - high1, 0) : 0;\n                                dmMinus[0]                        = low1 - low0 > high0 - high1 ? Math.Max(low1 - low0, 0) : 0;\n\n\n                                if (CurrentBar < Period)\n                                {\n                                        sumTr[0]                = sumTr[1] + tr[0];\n                                        sumDmPlus[0]        = sumDmPlus[1] + dmPlus[0];\n                                        sumDmMinus[0]        = sumDmMinus[1] + dmMinus[0];\n                                }\n                                else\n                                {\n                                        double sumTr1                = sumTr[1];\n                                        double sumDmPlus1        = sumDmPlus[1];\n                                        double sumDmMinus1        = sumDmMinus[1];\n\n\n                                        sumTr[0]                        = sumTr1 - sumTr1 / Period + tr[0];\n                                        sumDmPlus[0]                = sumDmPlus1 - sumDmPlus1 / Period + dmPlus[0];\n                                        sumDmMinus[0]                = sumDmMinus1 - sumDmMinus1 / Period + dmMinus[0];\n                                }\n\n\n                                double sumTr0                = sumTr[0];\n                                double diPlus                = 100 * (sumTr0.ApproxCompare(0) == 0 ? 0 : sumDmPlus[0] / sumTr[0]);\n                                double diMinus                = 100 * (sumTr0.ApproxCompare(0) == 0 ? 0 : sumDmMinus[0] / sumTr[0]);\n                                double diff                        = Math.Abs(diPlus - diMinus);\n                                double sum                        = diPlus + diMinus;\n\n\n                                Value[0]                        = sum.ApproxCompare(0) == 0 ? 50 : ((Period - 1) * Value[1] + 100 * diff / sum) / Period;\n                        }\n                }\n\n\n                #region Properties\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private ADX[] cacheADX;\n                public ADX ADX(int period)\n                {\n                        return ADX(Input, period);\n                }\n\n\n                public ADX ADX(ISeries<double> input, int period)\n                {\n                        if (cacheADX != null)\n                                for (int idx = 0; idx < cacheADX.Length; idx++)\n                                        if (cacheADX[idx] != null && cacheADX[idx].Period == period && cacheADX[idx].EqualsInput(input))\n                                                return cacheADX[idx];\n                        return CacheIndicator<ADX>(new ADX(){ Period = period }, input, ref cacheADX);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.ADX ADX(int period)\n                {\n                        return indicator.ADX(Input, period);\n                }\n\n\n                public Indicators.ADX ADX(ISeries<double> input , int period)\n                {\n                        return indicator.ADX(input, period);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.ADX ADX(int period)\n                {\n                        return indicator.ADX(Input, period);\n                }\n\n\n                public Indicators.ADX ADX(ISeries<double> input , int period)\n                {\n                        return indicator.ADX(input, period);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "DM.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// Directional Movement (DM). This is the same indicator as the ADX,\n        /// with the addition of the two directional movement indicators +DI\n        /// and -DI. +DI and -DI measure upward and downward momentum. A buy\n        /// signal is generated when +DI crosses -DI to the upside.\n        /// A sell signal is generated when -DI crosses +DI to the downside.\n        /// </summary>\n        public class DM : Indicator\n        {\n                private Series<double> dmPlus;\n                private Series<double> dmMinus;\n                private Series<double> sumDmPlus;\n                private Series<double> sumDmMinus;\n                private Series<double> sumTr;\n                private Series<double> tr;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionDM;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameDM;\n                                IsSuspendedWhileInactive        = true;\n                                Period                                                = 14;\n\n\n                                AddPlot(new Stroke(Brushes.DarkSeaGreen, 2),        PlotStyle.Line,        NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameADX);\n                                AddPlot(Brushes.DodgerBlue,                                                                                NinjaTrader.Custom.Resource.DMPlusDI);\n                                AddPlot(Brushes.Crimson,                                                                                NinjaTrader.Custom.Resource.DMMinusDI);\n\n\n                                AddLine(Brushes.DarkCyan,                                                25,                                NinjaTrader.Custom.Resource.NinjaScriptIndicatorLower);\n                                AddLine(Brushes.DarkCyan,                                                75,                                NinjaTrader.Custom.Resource.NinjaScriptIndicatorUpper);\n                        }\n\n\n                        else if (State == State.DataLoaded)\n                        {\n                                dmPlus                = new Series<double>(this);\n                                dmMinus                = new Series<double>(this);\n                                sumDmPlus        = new Series<double>(this);\n                                sumDmMinus        = new Series<double>(this);\n                                sumTr                = new Series<double>(this);\n                                tr                        = new Series<double>(this);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        double high0                = High[0];\n                        double low0                        = Low[0];\n                        double trueRange        = high0 - low0;\n\n\n                        if (CurrentBar == 0)\n                        {\n                                tr[0]                        = trueRange;\n                                dmPlus[0]                = 0;\n                                dmMinus[0]                = 0;\n                                sumTr[0]                = tr[0];\n                                sumDmPlus[0]        = dmPlus[0];\n                                sumDmMinus[0]        = dmMinus[0];\n                                ADXPlot[0]                = 50;\n                        }\n                        else\n                        {\n                                double low1                        = Low[1];\n                                double high1                = High[1];\n                                double close1                = Close[1];\n\n\n                                tr[0]                                = Math.Max(Math.Abs(low0 - close1), Math.Max(trueRange, Math.Abs(high0 - close1)));\n                                dmPlus[0]                        = high0 - high1 > low1 - low0 ? Math.Max(high0 - high1, 0) : 0;\n                                dmMinus[0]                        = low1 - low0 > high0 - high1 ? Math.Max(low1 - low0, 0) : 0;\n\n\n                                double sumDmPlus1        = sumDmPlus[1];\n                                double sumDmMinus1        = sumDmMinus[1];\n                                double sumTr1                = sumTr[1];\n\n\n                                if (CurrentBar < Period)\n                                {\n                                        sumTr[0]                = sumTr1 + tr[0];\n                                        sumDmPlus[0]        = sumDmPlus1 + dmPlus[0];\n                                        sumDmMinus[0]        = sumDmMinus1 + dmMinus[0];\n                                }\n                                else\n                                {\n                                        sumTr[0]                = sumTr1 - sumTr[1] / Period + tr[0];\n                                        sumDmPlus[0]        = sumDmPlus1 - sumDmPlus1 / Period + dmPlus[0];\n                                        sumDmMinus[0]        = sumDmMinus1 - sumDmMinus1 / Period + dmMinus[0];\n                                }\n\n\n                                double diPlus        = 100 * (sumTr[0] == 0 ? 0 : sumDmPlus[0] / sumTr[0]);\n                                double diMinus        = 100 * (sumTr[0] == 0 ? 0 : sumDmMinus[0] / sumTr[0]);\n                                double diff                = Math.Abs(diPlus - diMinus);\n                                double sum                = diPlus + diMinus;\n\n\n                                ADXPlot[0]                = sum == 0 ? 50 : ((Period - 1) * ADXPlot[1] + 100 * diff / sum) / Period;\n                                DiPlus[0]                = diPlus;\n                                DiMinus[0]                = diMinus;\n                        }\n                }\n\n\n                #region Properties\n                [Browsable(false)]        // this line prevents the data series from being displayed in the indicator properties dialog, do not remove\n                [XmlIgnore()]                // this line ensures that the indicator can be saved/recovered as part of a chart template, do not remove\n                public Series<double> ADXPlot\n                {\n                        get { return Values[0]; }\n                }\n\n\n                [Browsable(false)]\n                [XmlIgnore()]\n                public Series<double> DiPlus\n                {\n                        get { return Values[1]; }\n                }\n\n\n                [Browsable(false)]\n                [XmlIgnore()]\n                public Series<double> DiMinus\n                {\n                        get { return Values[2]; }\n                }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private DM[] cacheDM;\n                public DM DM(int period)\n                {\n                        return DM(Input, period);\n                }\n\n\n                public DM DM(ISeries<double> input, int period)\n                {\n                        if (cacheDM != null)\n                                for (int idx = 0; idx < cacheDM.Length; idx++)\n                                        if (cacheDM[idx] != null && cacheDM[idx].Period == period && cacheDM[idx].EqualsInput(input))\n                                                return cacheDM[idx];\n                        return CacheIndicator<DM>(new DM(){ Period = period }, input, ref cacheDM);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.DM DM(int period)\n                {\n                        return indicator.DM(Input, period);\n                }\n\n\n                public Indicators.DM DM(ISeries<double> input , int period)\n                {\n                        return indicator.DM(input, period);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.DM DM(int period)\n                {\n                        return indicator.DM(Input, period);\n                }\n\n\n                public Indicators.DM DM(ISeries<double> input , int period)\n                {\n                        return indicator.DM(input, period);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "DMI.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// Directional Movement Index. \n        /// An indicator developed by J. Welles Wilder for identifying when a definable trend is present in an instrument. \n        /// That is, the DMI tells whether an instrument is trending or not.\n        /// </summary>\n        public class DMI : Indicator\n        {\n                private Series<double>                dmMinus;\n                private Series<double>                dmPlus;\n                private Series<double>                tr;\n                private SMA                                        smaTr;\n                private        SMA                                        smaDmPlus;\n                private        SMA                                        smaDmMinus;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionDMI;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameDMI;\n                                IsSuspendedWhileInactive        = true;\n                                Period                                                = 14;\n\n\n                                AddPlot(Brushes.DarkCyan, NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameDMI);\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                dmMinus                = new Series<double>(this);\n                                dmPlus                = new Series<double>(this);\n                                tr                        = new Series<double>(this);\n                                smaTr                = SMA(tr, Period);\n                                smaDmMinus        = SMA(dmMinus, Period);\n                                smaDmPlus        = SMA(dmPlus, Period);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        double high0        = High[0];\n                        double low0                = Low[0];\n\n\n                        if (CurrentBar == 0)\n                        {\n                                dmMinus[0]                = 0;\n                                dmPlus[0]                = 0;\n                                tr[0]                        = high0 - low0;\n                                Value[0]                = 0;\n                        }\n                        else\n                        {\n                                double low1                                = Low[1];\n                                double High1                        = High[1];\n                                double close1                        = Close[1];\n\n\n                                dmMinus[0]                                = low1 - low0 > high0 - High1 ? Math.Max(low1 - low0, 0) : 0;\n                                dmPlus[0]                                = high0 - High1 > low1 - low0 ? Math.Max(high0 - High1, 0) : 0;\n                                tr[0]                                        = Math.Max(high0 - low0, Math.Max(Math.Abs(high0 - close1), Math.Abs(low0 - close1)));\n\n\n                                double smaTr0                        = smaTr[0];\n                                double smaDmMinus0                = smaDmMinus[0];\n                                double smaDmPlus0                = smaDmPlus[0];\n                                double diMinus                        = (smaTr0 == 0) ? 0 : smaDmMinus0 / smaTr0;\n                                double diPlus                        = (smaTr0 == 0) ? 0 : smaDmPlus0 / smaTr0;\n\n\n                                Value[0]                                = (diPlus + diMinus == 0) ? 0 : (diPlus - diMinus) / (diPlus + diMinus);\n                        }\n                }\n\n\n                #region Properties\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private DMI[] cacheDMI;\n                public DMI DMI(int period)\n                {\n                        return DMI(Input, period);\n                }\n\n\n                public DMI DMI(ISeries<double> input, int period)\n                {\n                        if (cacheDMI != null)\n                                for (int idx = 0; idx < cacheDMI.Length; idx++)\n                                        if (cacheDMI[idx] != null && cacheDMI[idx].Period == period && cacheDMI[idx].EqualsInput(input))\n                                                return cacheDMI[idx];\n                        return CacheIndicator<DMI>(new DMI(){ Period = period }, input, ref cacheDMI);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.DMI DMI(int period)\n                {\n                        return indicator.DMI(Input, period);\n                }\n\n\n                public Indicators.DMI DMI(ISeries<double> input , int period)\n                {\n                        return indicator.DMI(input, period);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.DMI DMI(int period)\n                {\n                        return indicator.DMI(Input, period);\n                }\n\n\n                public Indicators.DMI DMI(ISeries<double> input , int period)\n                {\n                        return indicator.DMI(input, period);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "EMA.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// Exponential Moving Average. The Exponential Moving Average is an indicator that\n        /// shows the average value of a security's price over a period of time. When calculating\n        /// a moving average. The EMA applies more weight to recent prices than the SMA.\n        /// </summary>\n        public class EMA : Indicator\n        {\n                private double constant1;\n                private double constant2;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionEMA;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameEMA;\n                                IsOverlay                                        = true;\n                                IsSuspendedWhileInactive        = true;\n                                Period                                                = 14;\n\n\n                                AddPlot(Brushes.Goldenrod, NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameEMA);\n                        }\n                        else if (State == State.Configure)\n                        {\n                                constant1 = 2.0 / (1 + Period);\n                                constant2 = 1 - (2.0 / (1 + Period));\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        Value[0] = (CurrentBar == 0 ? Input[0] : Input[0] * constant1 + constant2 * Value[1]);\n                }\n\n\n                #region Properties\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private EMA[] cacheEMA;\n                public EMA EMA(int period)\n                {\n                        return EMA(Input, period);\n                }\n\n\n                public EMA EMA(ISeries<double> input, int period)\n                {\n                        if (cacheEMA != null)\n                                for (int idx = 0; idx < cacheEMA.Length; idx++)\n                                        if (cacheEMA[idx] != null && cacheEMA[idx].Period == period && cacheEMA[idx].EqualsInput(input))\n                                                return cacheEMA[idx];\n                        return CacheIndicator<EMA>(new EMA(){ Period = period }, input, ref cacheEMA);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.EMA EMA(int period)\n                {\n                        return indicator.EMA(Input, period);\n                }\n\n\n                public Indicators.EMA EMA(ISeries<double> input , int period)\n                {\n                        return indicator.EMA(input, period);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.EMA EMA(int period)\n                {\n                        return indicator.EMA(Input, period);\n                }\n\n\n                public Indicators.EMA EMA(ISeries<double> input , int period)\n                {\n                        return indicator.EMA(input, period);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "MACD.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// The MACD (Moving Average Convergence/Divergence) is a trend following momentum indicator\n        /// that shows the relationship between two moving averages of prices.\n        /// </summary>\n        public class MACD : Indicator\n        {\n                private        Series<double>                fastEma;\n                private        Series<double>                slowEma;\n                private double                                constant1;\n                private double                                constant2;\n                private double                                constant3;\n                private double                                constant4;\n                private double                                constant5;\n                private double                                constant6;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = Custom.Resource.NinjaScriptIndicatorDescriptionMACD;\n                                Name                                                = Custom.Resource.NinjaScriptIndicatorNameMACD;\n                                Fast                                                = 12;\n                                IsSuspendedWhileInactive        = true;\n                                Slow                                                = 26;\n                                Smooth                                                = 9;\n\n\n                                AddPlot(Brushes.DarkCyan,                                                                        Custom.Resource.NinjaScriptIndicatorNameMACD);\n                                AddPlot(Brushes.Crimson,                                                                        Custom.Resource.NinjaScriptIndicatorAvg);\n                                AddPlot(new Stroke(Brushes.DodgerBlue, 2),        PlotStyle.Bar,        Custom.Resource.NinjaScriptIndicatorDiff);\n                                AddLine(Brushes.DarkGray,                                        0,                                Custom.Resource.NinjaScriptIndicatorZeroLine);\n                        }\n                        else if (State == State.Configure)\n                        {\n                                constant1        = 2.0 / (1 + Fast);\n                                constant2        = 1 - (2.0 / (1 + Fast));\n                                constant3        = 2.0 / (1 + Slow);\n                                constant4        = 1 - (2.0 / (1 + Slow));\n                                constant5        = 2.0 / (1 + Smooth);\n                                constant6        = 1 - (2.0 / (1 + Smooth));\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                fastEma = new Series<double>(this);\n                                slowEma = new Series<double>(this);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        double input0        = Input[0];\n\n\n                        if (CurrentBar == 0)\n                        {\n                                fastEma[0]                = input0;\n                                slowEma[0]                = input0;\n                                Value[0]                = 0;\n                                Avg[0]                        = 0;\n                                Diff[0]                        = 0;\n                        }\n                        else\n                        {\n                                double fastEma0        = constant1 * input0 + constant2 * fastEma[1];\n                                double slowEma0        = constant3 * input0 + constant4 * slowEma[1];\n                                double macd                = fastEma0 - slowEma0;\n                                double macdAvg        = constant5 * macd + constant6 * Avg[1];\n\n\n                                fastEma[0]                = fastEma0;\n                                slowEma[0]                = slowEma0;\n                                Value[0]                = macd;\n                                Avg[0]                        = macdAvg;\n                                Diff[0]                        = macd - macdAvg;\n                        }\n                }\n\n\n                #region Properties\n                [Browsable(false)]\n                [XmlIgnore]\n                public Series<double> Avg\n                {\n                        get { return Values[1]; }\n                }\n\n\n                [Browsable(false)]\n                [XmlIgnore]\n                public Series<double> Default\n                {\n                        get { return Values[0]; }\n                }\n\n\n                [Browsable(false)]\n                [XmlIgnore]\n                public Series<double> Diff\n                {\n                        get { return Values[2]; }\n                }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Fast\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Fast\n                { get; set; }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Slow\", GroupName = \"NinjaScriptParameters\", Order = 1)]\n                public int Slow\n                { get; set; }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Smooth\", GroupName = \"NinjaScriptParameters\", Order = 2)]\n                public int Smooth\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private MACD[] cacheMACD;\n                public MACD MACD(int fast, int slow, int smooth)\n                {\n                        return MACD(Input, fast, slow, smooth);\n                }\n\n\n                public MACD MACD(ISeries<double> input, int fast, int slow, int smooth)\n                {\n                        if (cacheMACD != null)\n                                for (int idx = 0; idx < cacheMACD.Length; idx++)\n                                        if (cacheMACD[idx] != null && cacheMACD[idx].Fast == fast && cacheMACD[idx].Slow == slow && cacheMACD[idx].Smooth == smooth && cacheMACD[idx].EqualsInput(input))\n                                                return cacheMACD[idx];\n                        return CacheIndicator<MACD>(new MACD(){ Fast = fast, Slow = slow, Smooth = smooth }, input, ref cacheMACD);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.MACD MACD(int fast, int slow, int smooth)\n                {\n                        return indicator.MACD(Input, fast, slow, smooth);\n                }\n\n\n                public Indicators.MACD MACD(ISeries<double> input , int fast, int slow, int smooth)\n                {\n                        return indicator.MACD(input, fast, slow, smooth);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.MACD MACD(int fast, int slow, int smooth)\n                {\n                        return indicator.MACD(Input, fast, slow, smooth);\n                }\n\n\n                public Indicators.MACD MACD(ISeries<double> input , int fast, int slow, int smooth)\n                {\n                        return indicator.MACD(input, fast, slow, smooth);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "RSI.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// The RSI (Relative Strength Index) is a price-following oscillator that ranges between 0 and 100.\n        /// </summary>\n        public class RSI : Indicator\n        {\n                private Series<double>                avgDown;\n                private Series<double>                avgUp;\n                private double                                constant1;\n                private double                                constant2;\n                private double                                constant3;\n                private Series<double>                down;\n                private SMA                                        smaDown;\n                private        SMA                                        smaUp;\n                private Series<double>                up;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionRSI;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameRSI;\n                                IsSuspendedWhileInactive        = true;\n                                BarsRequiredToPlot                        = 20;\n                                Period                                                = 14;\n                                Smooth                                                = 3;\n\n\n                                AddPlot(Brushes.DodgerBlue,                NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameRSI);\n                                AddPlot(Brushes.Goldenrod,                NinjaTrader.Custom.Resource.NinjaScriptIndicatorAvg);\n\n\n                                AddLine(Brushes.DarkCyan,        30,        NinjaTrader.Custom.Resource.NinjaScriptIndicatorLower);\n                                AddLine(Brushes.DarkCyan,        70,        NinjaTrader.Custom.Resource.NinjaScriptIndicatorUpper);\n                        }\n                        else if (State == State.Configure)\n                        {\n                                constant1 = 2.0 / (1 + Smooth);\n                                constant2 = (1 - (2.0 / (1 + Smooth)));\n                                constant3 = (Period - 1);\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                avgUp        = new Series<double>(this);\n                                avgDown = new Series<double>(this);\n                                down        = new Series<double>(this);\n                                up                = new Series<double>(this);\n                                smaDown = SMA(down, Period);\n                                smaUp        = SMA(up, Period);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (CurrentBar == 0)\n                        {\n                                down[0]                = 0;\n                                up[0]                = 0;\n\n\n                                if (Period < 3)\n                                        Avg[0] = 50;\n\n\n                                return;\n                        }\n\n\n                        double input0        = Input[0];\n                        double input1        = Input[1];\n                        down[0]                        = Math.Max(input1 - input0, 0);\n                        up[0]                        = Math.Max(input0 - input1, 0);\n\n\n                        if (CurrentBar + 1 < Period)\n                        {\n                                if (CurrentBar + 1 == Period - 1)\n                                        Avg[0] = 50;\n                                return;\n                        }\n\n\n                        if ((CurrentBar + 1) == Period)\n                        {\n                                // First averages\n                                avgDown[0]        = smaDown[0];\n                                avgUp[0]        = smaUp[0];\n                        }\n                        else\n                        {\n                                // Rest of averages are smoothed\n                                avgDown[0]        = (avgDown[1] * constant3 + down[0]) / Period;\n                                avgUp[0]        = (avgUp[1] * constant3 + up[0]) / Period;\n                        }\n\n\n                        double avgDown0        = avgDown[0];\n                        double value0        = avgDown0 == 0 ? 100 : 100 - 100 / (1 + avgUp[0] / avgDown0);\n                        Default[0]                = value0;\n                        Avg[0]                        = constant1 * value0 + constant2 * Avg[1];\n                }\n\n\n                #region Properties\n                [Browsable(false)]\n                [XmlIgnore()]\n                public Series<double> Avg\n                {\n                        get { return Values[1]; }\n                }\n\n\n                [Browsable(false)]\n                [XmlIgnore()]\n                public Series<double> Default\n                {\n                        get { return Values[0]; }\n                }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Smooth\", GroupName = \"NinjaScriptParameters\", Order = 1)]\n                public int Smooth\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private RSI[] cacheRSI;\n                public RSI RSI(int period, int smooth)\n                {\n                        return RSI(Input, period, smooth);\n                }\n\n\n                public RSI RSI(ISeries<double> input, int period, int smooth)\n                {\n                        if (cacheRSI != null)\n                                for (int idx = 0; idx < cacheRSI.Length; idx++)\n                                        if (cacheRSI[idx] != null && cacheRSI[idx].Period == period && cacheRSI[idx].Smooth == smooth && cacheRSI[idx].EqualsInput(input))\n                                                return cacheRSI[idx];\n                        return CacheIndicator<RSI>(new RSI(){ Period = period, Smooth = smooth }, input, ref cacheRSI);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.RSI RSI(int period, int smooth)\n                {\n                        return indicator.RSI(Input, period, smooth);\n                }\n\n\n                public Indicators.RSI RSI(ISeries<double> input , int period, int smooth)\n                {\n                        return indicator.RSI(input, period, smooth);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.RSI RSI(int period, int smooth)\n                {\n                        return indicator.RSI(Input, period, smooth);\n                }\n\n\n                public Indicators.RSI RSI(ISeries<double> input , int period, int smooth)\n                {\n                        return indicator.RSI(input, period, smooth);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "SampleAtmStrategy .txt", "content": "﻿#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.Indicators;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n//This namespace holds Strategies in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public class SampleAtmStrategy : Strategy\n        {\n\n\n                private string  atmStrategyId                        = string.Empty;\n                private string  orderId                                        = string.Empty;\n                private bool        isAtmStrategyCreated        = false;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description        = NinjaTrader.Custom.Resource.NinjaScriptStrategyDescriptionSampleATMStrategy;\n                                Name                = NinjaTrader.Custom.Resource.NinjaScriptStrategyNameSampleATMStrategy;\n                                // This strategy has been designed to take advantage of performance gains in Strategy Analyzer optimizations\n                                // See the Help Guide for additional information\n                                IsInstantiatedOnEachOptimizationIteration = false;\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (CurrentBar < BarsRequiredToTrade)\n                                return;\n\n\n                        // HELP DOCUMENTATION REFERENCE: Please see the Help Guide section \"Using ATM Strategies\" under NinjaScript--> Educational Resources--> http://ninjatrader.com/support/helpGuides/nt8/en-us/using_atm_strategies.htm\n\n\n                        // Make sure this strategy does not execute against historical data\n                        if(State == State.Historical)\n                                return;\n\n\n                        // Submits an entry limit order at the current low price to initiate an ATM Strategy if both order id and strategy id are in a reset state\n                        // **** YOU MUST HAVE AN ATM STRATEGY TEMPLATE NAMED 'AtmStrategyTemplate' CREATED IN NINJATRADER (SUPERDOM FOR EXAMPLE) FOR THIS TO WORK ****\n                        if (orderId.Length == 0 && atmStrategyId.Length == 0 && Close[0] > Open[0])\n                        {\n                                isAtmStrategyCreated = false;  // reset atm strategy created check to false\n                                atmStrategyId = GetAtmStrategyUniqueId();\n                                orderId = GetAtmStrategyUniqueId();\n                                AtmStrategyCreate(OrderAction.Buy, OrderType.Limit, Low[0], 0, TimeInForce.Day, orderId, \"AtmStrategyTemplate\", atmStrategyId, (atmCallbackErrorCode, atmCallBackId) => {\n                                        //check that the atm strategy create did not result in error, and that the requested atm strategy matches the id in callback\n                                        if (atmCallbackErrorCode == ErrorCode.NoError && atmCallBackId == atmStrategyId)\n                                                isAtmStrategyCreated = true;\n                                });\n                        }\n\n\n                        // Check that atm strategy was created before checking other properties\n                        if (!isAtmStrategyCreated)\n                                return;\n\n\n                        // Check for a pending entry order\n                        if (orderId.Length > 0)\n                        {\n                                string[] status = GetAtmStrategyEntryOrderStatus(orderId);\n\n\n                                // If the status call can't find the order specified, the return array length will be zero otherwise it will hold elements\n                                if (status.GetLength(0) > 0)\n                                {\n                                        // Print out some information about the order to the output window\n                                        Print(\"The entry order average fill price is: \" + status[0]);\n                                        Print(\"The entry order filled amount is: \" + status[1]);\n                                        Print(\"The entry order order state is: \" + status[2]);\n\n\n                                        // If the order state is terminal, reset the order id value\n                                        if (status[2] == \"Filled\" || status[2] == \"Cancelled\" || status[2] == \"Rejected\")\n                                                orderId = string.Empty;\n                                }\n                        } // If the strategy has terminated reset the strategy id\n                        else if (atmStrategyId.Length > 0 && GetAtmStrategyMarketPosition(atmStrategyId) == Cbi.MarketPosition.Flat)\n                                atmStrategyId = string.Empty;\n\n\n                        if (atmStrategyId.Length > 0)\n                        {\n                                // You can change the stop price\n                                if (GetAtmStrategyMarketPosition(atmStrategyId) != MarketPosition.Flat)\n                                        AtmStrategyChangeStopTarget(0, Low[0] - 3 * TickSize, \"STOP1\", atmStrategyId);\n\n\n                                // Print some information about the strategy to the output window, please note you access the ATM strategy specific position object here\n                                // the ATM would run self contained and would not have an impact on your NinjaScript strategy position and PnL\n                                Print(\"The current ATM Strategy market position is: \" + GetAtmStrategyMarketPosition(atmStrategyId));\n                                Print(\"The current ATM Strategy position quantity is: \" + GetAtmStrategyPositionQuantity(atmStrategyId));\n                                Print(\"The current ATM Strategy average price is: \" + GetAtmStrategyPositionAveragePrice(atmStrategyId));\n                                Print(\"The current ATM Strategy Unrealized PnL is: \" + GetAtmStrategyUnrealizedProfitLoss(atmStrategyId));\n                        }\n                }\n        }\n}"}
{"file_name": "SampleMACrossOver .txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.Indicators;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n//This namespace holds strategies in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public class SampleMACrossOver : Strategy\n        {\n                private SMA smaFast;\n                private SMA smaSlow;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description        = NinjaTrader.Custom.Resource.NinjaScriptStrategyDescriptionSampleMACrossOver;\n                                Name                = NinjaTrader.Custom.Resource.NinjaScriptStrategyNameSampleMACrossOver;\n                                Fast                = 10;\n                                Slow                = 25;\n                                // This strategy has been designed to take advantage of performance gains in Strategy Analyzer optimizations\n                                // See the Help Guide for additional information\n                                IsInstantiatedOnEachOptimizationIteration = false;\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                smaFast = SMA(Fast);\n                                smaSlow = SMA(Slow);\n\n\n                                smaFast.Plots[0].Brush = Brushes.Goldenrod;\n                                smaSlow.Plots[0].Brush = Brushes.SeaGreen;\n\n\n                                AddChartIndicator(smaFast);\n                                AddChartIndicator(smaSlow);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (CurrentBar < BarsRequiredToTrade)\n                                return;\n\n\n                        if (CrossAbove(smaFast, smaSlow, 1))\n                                EnterLong();\n                        else if (CrossBelow(smaFast, smaSlow, 1))\n                                EnterShort();\n                }\n\n\n                #region Properties\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Fast\", GroupName = \"NinjaScriptStrategyParameters\", Order = 0)]\n                public int Fast\n                { get; set; }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Slow\", GroupName = \"NinjaScriptStrategyParameters\", Order = 1)]\n                public int Slow\n                { get; set; }\n                #endregion\n        }\n}"}
{"file_name": "SampleMultiInstrument .txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.Indicators;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n//This namespace holds strategies in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public class SampleMultiInstrument : Strategy\n        {\n                private RSI rsi;\n                private ADX adx;\n                private ADX adx1;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description        = NinjaTrader.Custom.Resource.NinjaScriptStrategyDescriptionSampleMultiInstrument;\n                                Name                = NinjaTrader.Custom.Resource.NinjaScriptStrategyNameSampleMultiInstrument;\n                                // This strategy has been designed to take advantage of performance gains in Strategy Analyzer optimizations\n                                // See the Help Guide for additional information\n                                IsInstantiatedOnEachOptimizationIteration = false;\n                        }\n                        else if (State == State.Configure)\n                        {\n                                // Add an MSFT 1 minute Bars object to the strategy\n                                AddDataSeries(\"MSFT\", Data.BarsPeriodType.Minute, 1);\n\n\n                                // Sets a 20 tick trailing stop for an open position\n                                SetTrailStop(CalculationMode.Ticks, 20);\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                // Instantiate indicators in State.DataLoaded is the best practice.\n                                rsi = RSI(14, 1);\n                                adx = ADX(14);\n                                \n                                // Note: Bars are added to the BarsArray and can be accessed via an index value\n                                // E.G. BarsArray[1] ---> Accesses the 1 minute Bars added above\n                                adx1 = ADX(BarsArray[1], 14);\n\n\n                                // Add RSI and ADX indicators to the chart for display\n                                // This only displays the indicators for the primary Bars object (main instrument) on the chart\n                                // Note:  Only indicators using the chart data primary series can be displayed using AddChartIndicator()\n                                AddChartIndicator(rsi);\n                                AddChartIndicator(adx);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (CurrentBar < BarsRequiredToTrade || CurrentBars[0] < 0 || CurrentBars[1] < 0)\n                                return;\n\n\n                        // OnBarUpdate() will be called on incoming tick events on all Bars objects added to the strategy\n                        // We only want to process events on our primary Bars object (main instrument) (index = 0) which\n                        // is set when adding the strategy to a chart\n                        if (BarsInProgress != 0)\n                                return;\n\n\n                        // Checks if the 14 period ADX on both instruments are trending (above a value of 30)\n                        if (adx[0] > 30 && adx1[0] > 30)\n                        {\n                                // If RSI crosses above a value of 30 then enter a long position via a limit order\n                                if (CrossAbove(rsi, 30, 1))\n                                {\n                                        // Draws a square 1 tick above the high of the bar identifying when a limit order is issued\n                                        Draw.Square(this, \"My Square\" + CurrentBar, false, 0, High[0] + TickSize, Brushes.DodgerBlue);\n\n\n                                        // Enter a long position via a limit order at the current ask price\n                                        EnterLongLimit(GetCurrentAsk(), \"RSI\");\n                                }\n                        }\n\n\n                        // Any open long position will exit if RSI crosses below a value of 75\n                        // This is in addition to the trail stop set in the OnStateChange() method under State.Configure\n                        if (CrossBelow(rsi, 75, 1))\n                                ExitLong();\n                }\n        }\n}"}
{"file_name": "SampleMultiTimeFrame.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.Indicators;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n//This namespace holds strategies in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public class SampleMultiTimeFrame : Strategy\n        {\n                private SMA sma50B0;\n                private SMA sma50B1;\n                private SMA sma50B2;\n                private SMA sma5B0;\n                private SMA sma5B1;\n                private SMA sma5B2;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description        = NinjaTrader.Custom.Resource.NinjaScriptStrategyDescriptionSampleMultiTimeFrame;\n                                Name                = NinjaTrader.Custom.Resource.NinjaScriptStrategyNameSampleMultiTimeFrame;\n                                // This strategy has been designed to take advantage of performance gains in Strategy Analyzer optimizations\n                                // See the Help Guide for additional information\n                                IsInstantiatedOnEachOptimizationIteration = false;\n                        }\n                        else if (State == State.Configure)\n                        {\n                                // Add a 5 minute Bars object to the strategy\n                                AddDataSeries(Data.BarsPeriodType.Minute, 5);\n\n\n                                // Add a 15 minute Bars object to the strategy\n                                AddDataSeries(Data.BarsPeriodType.Minute, 15);\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                // Best practice is to instantiate indicators in State.DataLoaded.\n                                sma50B0 = SMA(50);\n                                sma5B0 = SMA(5);\n                                \n                                // Note: Bars are added to the BarsArray and can be accessed via an index value\n                                // E.G. BarsArray[1] ---> Accesses the 5 minute Bars object added above\n                                sma50B1 = SMA(BarsArray[1], 50);\n                                sma50B2 = SMA(BarsArray[2], 50);\n                                sma5B1  = SMA(BarsArray[1], 5);\n                                sma5B2  = SMA(BarsArray[2], 5);\n\n\n                                // Add simple moving averages to the chart for display\n                                // This only displays the SMA's for the primary Bars object on the chart\n                                // Note only indicators based on the charts primary data series can be added.\n                                AddChartIndicator(sma5B0);\n                                AddChartIndicator(sma50B0);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (CurrentBar < BarsRequiredToTrade || CurrentBars[0] < 1 || CurrentBars[1] < 1 || CurrentBars[2] < 1)\n                                return;\n                \n                        // OnBarUpdate() will be called on incoming tick events on all Bars objects added to the strategy\n                        // We only want to process events on our primary Bars object (index = 0) which is set when adding\n                        // the strategy to a chart\n                        if (BarsInProgress != 0)\n                                return;                \n\n\n                        // Checks  if the 5 period SMA is above the 50 period SMA on both the 5 and 15 minute time frames\n                        if (sma5B1[0] > sma50B1[0] && sma5B2[0] > sma50B2[0])\n                        {\n                                // Checks for a cross above condition of the 5 and 50 period SMA on the primary Bars object and enters long\n                                if (CrossAbove(sma5B0, sma50B0, 1))\n                                {\n                                        EnterLong(1000, \"SMA\");\n                                }\n                        }\n\n\n                        // Checks for a cross below condition of the 5 and 15 period SMA on the 15 minute time frame and exits long\n                        if (CrossBelow(sma5B2, sma50B2, 1))\n                                ExitLong(1000);\n                }\n        }\n}"}
{"file_name": "SMA.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// The SMA (Simple Moving Average) is an indicator that shows the average value of a security's price over a period of time.\n        /// </summary>\n        public class SMA : Indicator\n        {\n                private double priorSum;\n                private double sum;\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionSMA;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameSMA;\n                                IsOverlay                                        = true;\n                                IsSuspendedWhileInactive        = true;\n                                Period                                                = 14;\n\n\n                                AddPlot(Brushes.Goldenrod, NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameSMA);\n                        }\n                        else if (State == State.Configure)\n                        {\n                                priorSum        = 0;\n                                sum                        = 0;\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (BarsArray[0].BarsType.IsRemoveLastBarSupported)\n                        {\n                                if (CurrentBar == 0)\n                                        Value[0] = Input[0];\n                                else\n                                {\n                                        double last = Value[1] * Math.Min(CurrentBar, Period);\n\n\n                                        if (CurrentBar >= Period)\n                                                Value[0] = (last + Input[0] - Input[Period]) / Math.Min(CurrentBar, Period);\n                                        else\n                                                Value[0] = ((last + Input[0]) / (Math.Min(CurrentBar, Period) + 1));\n                                }\n                        }\n                        else\n                        {\n                                if (IsFirstTickOfBar)\n                                        priorSum = sum;\n\n\n                                sum = priorSum + Input[0] - (CurrentBar >= Period ? Input[Period] : 0);\n                                Value[0] = sum / (CurrentBar < Period ? CurrentBar + 1 : Period);\n                        }\n                }\n\n\n                #region Properties\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private SMA[] cacheSMA;\n                public SMA SMA(int period)\n                {\n                        return SMA(Input, period);\n                }\n\n\n                public SMA SMA(ISeries<double> input, int period)\n                {\n                        if (cacheSMA != null)\n                                for (int idx = 0; idx < cacheSMA.Length; idx++)\n                                        if (cacheSMA[idx] != null && cacheSMA[idx].Period == period && cacheSMA[idx].EqualsInput(input))\n                                                return cacheSMA[idx];\n                        return CacheIndicator<SMA>(new SMA(){ Period = period }, input, ref cacheSMA);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.SMA SMA(int period)\n                {\n                        return indicator.SMA(Input, period);\n                }\n\n\n                public Indicators.SMA SMA(ISeries<double> input , int period)\n                {\n                        return indicator.SMA(input, period);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.SMA SMA(int period)\n                {\n                        return indicator.SMA(Input, period);\n                }\n\n\n                public Indicators.SMA SMA(ISeries<double> input , int period)\n                {\n                        return indicator.SMA(input, period);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "VMA.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n//This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// The VMA (Variable Moving Average, also known as VIDYA or Variable Index Dynamic Average)\n        ///  is an exponential moving average that automatically adjusts the smoothing weight based\n        /// on the volatility of the data series. VMA solves a problem with most moving averages.\n        /// In times of low volatility, such as when the price is trending, the moving average time\n        ///  period should be shorter to be sensitive to the inevitable break in the trend. Whereas,\n        /// in more volatile non-trending times, the moving average time period should be longer to\n        /// filter out the choppiness. VIDYA uses the CMO indicator for it's internal volatility calculations.\n        /// Both the VMA and the CMO period are adjustable.\n        /// </summary>\n        public class VMA : Indicator\n        {\n                private CMO                cmo;\n                private double        sc;        //Smoothing Constant\n\n\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = NinjaTrader.Custom.Resource.NinjaScriptIndicatorDescriptionVMA;\n                                Name                                                = NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameVMA;\n                                IsSuspendedWhileInactive        = true;\n                                IsOverlay                                        = true;\n                                Period                                                = 9;\n                                VolatilityPeriod                        = 9;\n\n\n                                AddPlot(Brushes.DodgerBlue, NinjaTrader.Custom.Resource.NinjaScriptIndicatorNameVMA);\n                        }\n                        else if (State == State.Configure)\n                        {\n                                sc  = 2 / (double)(Period + 1);\n                        }\n                        else if (State == State.DataLoaded)\n                        {\n                                cmo = CMO(Inputs[0], VolatilityPeriod);\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        if (CurrentBar == 0)\n                        {\n                                Value[0] = Input[0];\n                                return;\n                        }\n\n\n                        // Volatility Index\n                        double vi        = Math.Abs(cmo[0]) / 100;\n                        Value[0]        = sc * vi * Input[0] + (1 - sc * vi) * Value[1];\n                }\n\n\n                #region Properties\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"Period\", GroupName = \"NinjaScriptParameters\", Order = 0)]\n                public int Period\n                { get; set; }\n\n\n                [Range(1, int.MaxValue), NinjaScriptProperty]\n                [Display(ResourceType = typeof(Custom.Resource), Name = \"VolatilityPeriod\", GroupName = \"NinjaScriptParameters\", Order = 1)]\n                public int VolatilityPeriod\n                { get; set; }\n                #endregion\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private VMA[] cacheVMA;\n                public VMA VMA(int period, int volatilityPeriod)\n                {\n                        return VMA(Input, period, volatilityPeriod);\n                }\n\n\n                public VMA VMA(ISeries<double> input, int period, int volatilityPeriod)\n                {\n                        if (cacheVMA != null)\n                                for (int idx = 0; idx < cacheVMA.Length; idx++)\n                                        if (cacheVMA[idx] != null && cacheVMA[idx].Period == period && cacheVMA[idx].VolatilityPeriod == volatilityPeriod && cacheVMA[idx].EqualsInput(input))\n                                                return cacheVMA[idx];\n                        return CacheIndicator<VMA>(new VMA(){ Period = period, VolatilityPeriod = volatilityPeriod }, input, ref cacheVMA);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.VMA VMA(int period, int volatilityPeriod)\n                {\n                        return indicator.VMA(Input, period, volatilityPeriod);\n                }\n\n\n                public Indicators.VMA VMA(ISeries<double> input , int period, int volatilityPeriod)\n                {\n                        return indicator.VMA(input, period, volatilityPeriod);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.VMA VMA(int period, int volatilityPeriod)\n                {\n                        return indicator.VMA(Input, period, volatilityPeriod);\n                }\n\n\n                public Indicators.VMA VMA(ISeries<double> input , int period, int volatilityPeriod)\n                {\n                        return indicator.VMA(input, period, volatilityPeriod);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "VOL.txt", "content": "﻿//\n// Copyright (C) 2024, NinjaTrader LLC <www.ninjatrader.com>.\n// NinjaTrader reserves the right to modify or overwrite this NinjaScript component with each release.\n//\n#region Using declarations\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Xml.Serialization;\nusing NinjaTrader.Cbi;\nusing NinjaTrader.Gui;\nusing NinjaTrader.Gui.Chart;\nusing NinjaTrader.Gui.SuperDom;\nusing NinjaTrader.Data;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.Core.FloatingPoint;\nusing NinjaTrader.NinjaScript.DrawingTools;\n#endregion\n\n\n// This namespace holds indicators in this folder and is required. Do not change it.\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        /// <summary>\n        /// Volume is simply the number of shares (or contracts) traded during a specified time frame (e.g. hour, day, week, month, etc).\n        /// </summary>\n        public class VOL : Indicator\n        {\n                protected override void OnStateChange()\n                {\n                        if (State == State.SetDefaults)\n                        {\n                                Description                                        = Custom.Resource.NinjaScriptIndicatorDescriptionVOL;\n                                Name                                                = Custom.Resource.NinjaScriptIndicatorNameVOL;\n                                BarsRequiredToPlot                        = 0;\n                                Calculate                                        = Calculate.OnEachTick;\n                                DrawOnPricePanel                        = false;\n                                IsSuspendedWhileInactive        = true;\n\n\n                                AddPlot(new Stroke(Brushes.DodgerBlue, 2),        PlotStyle.Bar,        Custom.Resource.VOLVolume);\n                                AddLine(Brushes.DarkGray, 0,                        Custom.Resource.NinjaScriptIndicatorZeroLine);\n                        }\n                        else if (State == State.Historical)\n                        {\n                                if (Calculate == Calculate.OnPriceChange)\n                                {\n                                        Draw.TextFixed(this, \"NinjaScriptInfo\", string.Format(Custom.Resource.NinjaScriptOnPriceChangeError, Name), TextPosition.BottomRight);\n                                        Log(string.Format(Custom.Resource.NinjaScriptOnPriceChangeError, Name), LogLevel.Error);\n                                }\n                        }\n                }\n\n\n                protected override void OnBarUpdate()\n                {\n                        Value[0] = Instrument.MasterInstrument.InstrumentType == InstrumentType.CryptoCurrency ? Core.Globals.ToCryptocurrencyVolume((long)Volume[0]) : Volume[0];\n                }\n        }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private VOL[] cacheVOL;\n                public VOL VOL()\n                {\n                        return VOL(Input);\n                }\n\n\n                public VOL VOL(ISeries<double> input)\n                {\n                        if (cacheVOL != null)\n                                for (int idx = 0; idx < cacheVOL.Length; idx++)\n                                        if (cacheVOL[idx] != null &&  cacheVOL[idx].EqualsInput(input))\n                                                return cacheVOL[idx];\n                        return CacheIndicator<VOL>(new VOL(), input, ref cacheVOL);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.VOL VOL()\n                {\n                        return indicator.VOL(Input);\n                }\n\n\n                public Indicators.VOL VOL(ISeries<double> input )\n                {\n                        return indicator.VOL(input);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.VOL VOL()\n                {\n                        return indicator.VOL(Input);\n                }\n\n\n                public Indicators.VOL VOL(ISeries<double> input )\n                {\n                        return indicator.VOL(input);\n                }\n        }\n}\n\n\n#endregion"}
{"file_name": "VolumeColorVsSMA .txt", "content": "﻿// VolumeColorVsSMA – v2.3 (simple constant gate)\n// Blue histogram bar when bar volume > VolSmaMult × 50‑SMA of volume (default 0.9).\n// Yellow line plots the 50‑SMA itself.\n\n\n#region Using declarations\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing NinjaTrader.NinjaScript;\nusing NinjaTrader.NinjaScript.Indicators;\nusing NinjaTrader.Data;\nusing System.Windows.Media;\n#endregion\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n    public class VolumeColorVsSMA : Indicator\n    {\n        private SMA volSma;\n\n\n        // ───── USER PARAMETER ─────\n        [NinjaScriptProperty, Range(0.1, 5)]\n        [Display(Name = \"Vol SMA Mult\", Order = 0, GroupName = \"Parameters\")]\n        public double VolSmaMult { get; set; } = 0.9;\n\n\n        protected override void OnStateChange()\n        {\n            if (State == State.SetDefaults)\n            {\n                Name        = \"VolumeColorVsSMA\";\n                Description = \"Colours volume bars blue when barVol exceeds VolSmaMult × 50‑SMA (default 0.9); red otherwise. Yellow line = 50‑SMA.\";\n                Calculate   = Calculate.OnBarClose;\n                IsOverlay   = false;\n\n\n                AddPlot(Brushes.Yellow, \"VolumeSMA\");   // idx 0 – SMA line\n                AddPlot(Brushes.Gray,   \"VolumeBars\");  // idx 1 – histogram\n                Plots[1].PlotStyle = PlotStyle.Bar;\n            }\n            else if (State == State.Configure)\n            {\n                volSma = SMA(Volume, 50);\n            }\n        }\n\n\n        protected override void OnBarUpdate()\n        {\n            if (CurrentBar < 50) return;\n\n\n            double smaVal = volSma[0];\n            double barVol = Volume[0];\n\n\n            Values[0][0] = smaVal;   // SMA plot\n            Values[1][0] = barVol;   // histogram bar\n\n\n            PlotBrushes[1][0] = barVol > smaVal * VolSmaMult ? Brushes.DodgerBlue : Brushes.Red;\n        }\n    }\n}\n\n\n#region NinjaScript generated code. Neither change nor remove.\n\n\nnamespace NinjaTrader.NinjaScript.Indicators\n{\n        public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase\n        {\n                private VolumeColorVsSMA[] cacheVolumeColorVsSMA;\n                public VolumeColorVsSMA VolumeColorVsSMA(double volSmaMult)\n                {\n                        return VolumeColorVsSMA(Input, volSmaMult);\n                }\n\n\n                public VolumeColorVsSMA VolumeColorVsSMA(ISeries<double> input, double volSmaMult)\n                {\n                        if (cacheVolumeColorVsSMA != null)\n                                for (int idx = 0; idx < cacheVolumeColorVsSMA.Length; idx++)\n                                        if (cacheVolumeColorVsSMA[idx] != null && cacheVolumeColorVsSMA[idx].VolSmaMult == volSmaMult && cacheVolumeColorVsSMA[idx].EqualsInput(input))\n                                                return cacheVolumeColorVsSMA[idx];\n                        return CacheIndicator<VolumeColorVsSMA>(new VolumeColorVsSMA(){ VolSmaMult = volSmaMult }, input, ref cacheVolumeColorVsSMA);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.MarketAnalyzerColumns\n{\n        public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase\n        {\n                public Indicators.VolumeColorVsSMA VolumeColorVsSMA(double volSmaMult)\n                {\n                        return indicator.VolumeColorVsSMA(Input, volSmaMult);\n                }\n\n\n                public Indicators.VolumeColorVsSMA VolumeColorVsSMA(ISeries<double> input , double volSmaMult)\n                {\n                        return indicator.VolumeColorVsSMA(input, volSmaMult);\n                }\n        }\n}\n\n\nnamespace NinjaTrader.NinjaScript.Strategies\n{\n        public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase\n        {\n                public Indicators.VolumeColorVsSMA VolumeColorVsSMA(double volSmaMult)\n                {\n                        return indicator.VolumeColorVsSMA(Input, volSmaMult);\n                }\n\n\n                public Indicators.VolumeColorVsSMA VolumeColorVsSMA(ISeries<double> input , double volSmaMult)\n                {\n                        return indicator.VolumeColorVsSMA(input, volSmaMult);\n                }\n        }\n}\n\n\n#endregion"}
